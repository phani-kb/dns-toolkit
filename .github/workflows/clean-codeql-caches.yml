name: Cleanup CodeQL Caches

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry Run? (true to only list, false to delete)'
        required: false
        default: true
        type: boolean
      cache_key_prefix:
        description: 'Prefix of cache keys to target'
        required: false
        default: 'codeql-dependencies-1-Linux-go'
        type: string
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: read
  actions: write

jobs:
  cleanup-caches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          echo "GitHub CLI is set up."

      - name: Determine Run Mode (Dry Run or Actual Delete)
        id: run-mode
        run: |
          DRY_RUN_INPUT="${{ github.event.inputs.dry_run || 'true' }}"
          
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            IS_DRY_RUN="false"
            echo "::notice::Scheduled run detected. Performing actual deletion."
          else
            IS_DRY_RUN="$DRY_RUN_INPUT"
          fi
          
          echo "IS_DRY_RUN=$IS_DRY_RUN" >> $GITHUB_OUTPUT
          echo "::notice::Dry run mode: $IS_DRY_RUN"

      - name: Fetch and Filter Caches
        id: fetch-caches
        env:
          GH_TOKEN: ${{ github.token }}
          CACHE_KEY_PREFIX: ${{ github.event.inputs.cache_key_prefix || 'codeql-dependencies-1-Linux-go' }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Fetching caches matching prefix: $CACHE_KEY_PREFIX in $REPO_OWNER/$REPO_NAME"

          all_matching_caches_json=$(gh api "repos/$REPO_OWNER/$REPO_NAME/actions/caches" --paginate \
            | jq --arg prefix "$CACHE_KEY_PREFIX" '[.actions_caches[] | select(.key | startswith($prefix))] | sort_by(.created_at) | reverse')

          if [ "$(echo "$all_matching_caches_json" | jq '. | length')" -eq 0 ]; then
            echo "::notice::No caches found matching the prefix '$CACHE_KEY_PREFIX'."
            echo "caches-to-delete-ids=[]" >> $GITHUB_OUTPUT # Ensure output is set
            exit 0
          fi

          most_recent_cache_id=$(echo "$all_matching_caches_json" | jq -r '.[0].id')
          most_recent_cache_key=$(echo "$all_matching_caches_json" | jq -r '.[0].key')
          most_recent_cache_created_at=$(echo "$all_matching_caches_json" | jq -r '.[0].created_at')

          echo "Most recent cache to KEEP:"
          echo "ID: $most_recent_cache_id"
          echo "Key: $most_recent_cache_key"
          echo "Created at: $most_recent_cache_created_at"

          caches_to_delete_ids=$(echo "$all_matching_caches_json" | jq -r ".[1:] | .[].id")
          
          if [ -z "$caches_to_delete_ids" ]; then
            echo "::notice::Only one matching cache found, nothing else to delete."
            echo "caches-to-delete-ids=[]" >> $GITHUB_OUTPUT # Ensure output is set
          else
            echo "The following cache IDs will be DELETED (older ones):"
            echo "$caches_to_delete_ids"
            # Output the IDs as a JSON array for the next step
            echo "caches-to-delete-ids=$(echo "$caches_to_delete_ids" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT
          fi

      - name: Delete Old Caches
        if: ${{ steps.run-mode.outputs.IS_DRY_RUN == 'false' && steps.fetch-caches.outputs.num-caches-to-delete > 0 }}
        env:
          GH_TOKEN: ${{ github.token }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          CACHE_IDS_TO_DELETE: ${{ steps.fetch-caches.outputs.caches-to-delete-ids }}
        run: |
          echo "Starting deletion of older caches..."
          
          # Use jq to iterate over the JSON array of IDs
          echo "$CACHE_IDS_TO_DELETE" | jq -r '.[]' | while read id; do
            echo "Deleting cache ID: $id"
            gh api -X DELETE "repos/$REPO_OWNER/$REPO_NAME/actions/caches/$id" --silent
            if [ $? -eq 0 ]; then
              echo "Successfully deleted cache ID: $id"
            else
              echo "Failed to delete cache ID: $id"
            fi
          done
          echo "Deletion process completed."

      - name: Report Dry Run Status
        if: ${{ steps.run-mode.outputs.IS_DRY_RUN == 'true' }}
        run: |
          NUM_TO_DELETE=${{ steps.fetch-caches.outputs.num-caches-to-delete || 0 }}
          echo "::notice::Dry run completed. No caches were deleted."
          echo "Found $NUM_TO_DELETE caches that would have been deleted."