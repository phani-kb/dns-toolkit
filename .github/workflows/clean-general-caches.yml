name: Cleanup General Caches

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry Run? (true to only list, false to delete)'
        required: false
        default: true
        type: boolean
      cache_key_patterns:
        description: 'Comma-separated cache key patterns to target (leave empty for all non-CodeQL caches)'
        required: false
        default: 'data-download-,Linux-golangci-lint-'
        type: string
      days_old:
        description: 'Delete caches older than this many days'
        required: false
        default: 2
        type: number
  schedule:
    - cron: '0 2 */3 * *'

permissions:
  contents: read
  actions: write

jobs:
  cleanup-caches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          echo "GitHub CLI is set up."

      - name: Determine Run Mode (Dry Run or Actual Delete)
        id: run-mode
        run: |
          DRY_RUN_INPUT="${{ github.event.inputs.dry_run || 'true' }}"

          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            IS_DRY_RUN="false"
            echo "::notice::Scheduled run detected. Performing actual deletion."
          else
            IS_DRY_RUN="$DRY_RUN_INPUT"
          fi

          echo "IS_DRY_RUN=$IS_DRY_RUN" >> $GITHUB_OUTPUT
          echo "::notice::Dry run mode: $IS_DRY_RUN"

      - name: Fetch and Filter Caches
        id: fetch-caches
        env:
          GH_TOKEN: ${{ github.token }}
          CACHE_KEY_PATTERNS: ${{ github.event.inputs.cache_key_patterns || 'data-download-,Linux-golangci-lint-' }}
          DAYS_OLD: ${{ github.event.inputs.days_old || 2 }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Fetching caches older than $DAYS_OLD days matching patterns: $CACHE_KEY_PATTERNS in $REPO_OWNER/$REPO_NAME"

          # Calculate the cutoff date
          CUTOFF_DATE=$(date -d "$DAYS_OLD days ago" --iso-8601=seconds)
          echo "Cutoff date: $CUTOFF_DATE"

          # Fetch all caches
          all_caches_json=$(gh api "repos/$REPO_OWNER/$REPO_NAME/actions/caches" --paginate | jq -s 'map(.actions_caches) | flatten')

          if [ "$(echo "$all_caches_json" | jq '. | length')" -eq 0 ]; then
            echo "::notice::No caches found in the repository."
            echo "caches-to-delete-ids=[]" >> $GITHUB_OUTPUT
            echo "num-caches-to-delete=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Filter caches based on patterns and age
          if [ -n "$CACHE_KEY_PATTERNS" ] && [ "$CACHE_KEY_PATTERNS" != "" ]; then
            # Build jq filter for specific patterns
            echo "Filtering for specific patterns: $CACHE_KEY_PATTERNS"
            
            # Convert comma-separated patterns to jq array format
            patterns_json=$(echo "$CACHE_KEY_PATTERNS" | jq -R 'split(",") | map(gsub("^\\s+|\\s+$"; "")) | map(select(length > 0))')
            echo "Patterns as JSON: $patterns_json"
            
            # Filter caches by pattern and age
            filtered_caches=$(echo "$all_caches_json" | jq --argjson patterns "$patterns_json" --arg cutoff "$CUTOFF_DATE" '
              map(select(
                (.created_at < $cutoff) and 
                (any($patterns[]; . as $pattern | ($pattern != "" and (.key | startswith($pattern)))))
              )) | sort_by(.created_at)
            ')
          else
            # If no patterns specified, exclude CodeQL caches (handled by separate workflow)
            echo "No specific patterns provided, excluding CodeQL caches only"
            filtered_caches=$(echo "$all_caches_json" | jq --arg cutoff "$CUTOFF_DATE" '
              map(select(
                (.created_at < $cutoff) and 
                (.key | startswith("codeql-") | not)
              )) | sort_by(.created_at)
            ')
          fi

          num_caches=$(echo "$filtered_caches" | jq 'length')
          echo "Found $num_caches caches matching criteria"

          if [ "$num_caches" -eq 0 ]; then
            echo "::notice::No caches found matching the specified patterns and age criteria."
            echo "caches-to-delete-ids=[]" >> $GITHUB_OUTPUT
            echo "num-caches-to-delete=0" >> $GITHUB_OUTPUT
          else
            echo "The following caches will be DELETED (older than $DAYS_OLD days):"
            echo "$filtered_caches" | jq -r '.[] | "ID: \(.id) | Key: \(.key) | Created: \(.created_at) | Size: \(.size_in_bytes) bytes"'
            
            # Extract IDs for deletion as JSON array
            cache_ids_json=$(echo "$filtered_caches" | jq -c 'map(.id)')
            
            echo "caches-to-delete-ids=$cache_ids_json" >> $GITHUB_OUTPUT
            echo "num-caches-to-delete=$num_caches" >> $GITHUB_OUTPUT
          fi

      - name: Delete Old Caches
        if: ${{ steps.run-mode.outputs.IS_DRY_RUN == 'false' && steps.fetch-caches.outputs.num-caches-to-delete > 0 }}
        env:
          GH_TOKEN: ${{ github.token }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          CACHE_IDS_TO_DELETE: ${{ steps.fetch-caches.outputs.caches-to-delete-ids }}
        run: |
          echo "Starting deletion of old caches..."

          deleted_count=0
          failed_count=0

          # Use jq to iterate over the JSON array of IDs
          echo "$CACHE_IDS_TO_DELETE" | jq -r '.[]' | while read id; do
            echo "Deleting cache ID: $id"
            if gh api -X DELETE "repos/$REPO_OWNER/$REPO_NAME/actions/caches/$id" --silent; then
              echo "Successfully deleted cache ID: $id"
              deleted_count=$((deleted_count + 1))
            else
              echo "Failed to delete cache ID: $id"
              failed_count=$((failed_count + 1))
            fi
          done

          echo "Deletion process completed."
          echo "Successfully deleted: $deleted_count caches"
          echo "Failed to delete: $failed_count caches"

      - name: Report Dry Run Status
        if: ${{ steps.run-mode.outputs.IS_DRY_RUN == 'true' }}
        env:
          NUM_TO_DELETE: ${{ steps.fetch-caches.outputs.num-caches-to-delete || 0 }}
          DAYS_OLD: ${{ github.event.inputs.days_old || 2 }}
        run: |
          echo "::notice::Dry run completed. No caches were deleted."
          echo "Found $NUM_TO_DELETE caches older than $DAYS_OLD days that would have been deleted."

          if [ "$NUM_TO_DELETE" -gt 0 ]; then
            echo "::warning::$NUM_TO_DELETE caches are eligible for deletion. Set dry_run to false to delete them."
          else
            echo "::notice::No caches found that match the deletion criteria."
          fi

      - name: Summary
        run: |
          echo "## Cache Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: ${{ steps.run-mode.outputs.IS_DRY_RUN == 'true' && 'Dry Run' || 'Actual Deletion' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Age Threshold**: ${{ github.event.inputs.days_old || 2 }} days" >> $GITHUB_STEP_SUMMARY
          echo "- **Patterns**: ${{ github.event.inputs.cache_key_patterns || 'data-download-,Linux-golangci-lint-' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Caches Found**: ${{ steps.fetch-caches.outputs.num-caches-to-delete || 0 }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.run-mode.outputs.IS_DRY_RUN }}" == "true" ]]; then
            echo "- **Action**: Listed caches only (dry run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action**: Deleted old caches" >> $GITHUB_STEP_SUMMARY
          fi
