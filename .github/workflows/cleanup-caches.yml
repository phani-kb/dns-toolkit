name: Cleanup Caches

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry Run? (true to only list, false to delete)'
        required: false
        default: true
        type: boolean
      cache_key_prefix:
        description: 'Prefix of cache keys to target'
        required: false
        default: ''
        type: string
  schedule:
    - cron: '0 2 */3 * *' # General caches
    - cron: '0 0 * * *' # CodeQL caches

permissions:
  contents: read
  actions: write

jobs:
  cleanup-caches:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cache_key_prefix: ['data-download-', 'codeql-dependencies-1-Linux-go']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          echo "GitHub CLI is set up."

      - name: Determine Run Mode (Dry Run or Actual Delete)
        id: run-mode
        run: |
          DRY_RUN_INPUT="${{ github.event.inputs.dry_run || 'true' }}"

          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            IS_DRY_RUN="false"
            echo "::notice::Scheduled run detected. Performing actual deletion."
          else
            IS_DRY_RUN="$DRY_RUN_INPUT"
          fi

          echo "IS_DRY_RUN=$IS_DRY_RUN" >> $GITHUB_OUTPUT
          echo "::notice::Dry run mode: $IS_DRY_RUN"

      - name: Fetch and Filter Caches
        id: fetch-caches
        env:
          GH_TOKEN: ${{ github.token }}
          CACHE_KEY_PREFIX: ${{ matrix.cache_key_prefix }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.cache_key_prefix }}" && "${{ matrix.cache_key_prefix }}" != "${{ github.event.inputs.cache_key_prefix }}" ]]; then
            echo "::notice::Skipping ${{ matrix.cache_key_prefix }} as it does not match the requested prefix."
            echo "caches-to-delete-ids=[]" >> $GITHUB_OUTPUT
            echo "num-caches-to-delete=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Fetching caches matching prefix: $CACHE_KEY_PREFIX in $REPO_OWNER/$REPO_NAME"

          all_matching_caches_json=$(gh api "repos/$REPO_OWNER/$REPO_NAME/actions/caches" --paginate \
            | jq --arg prefix "$CACHE_KEY_PREFIX" '[.actions_caches[] | select(.key | startswith($prefix))] | sort_by(.created_at) | reverse')

          if [ "$(echo "$all_matching_caches_json" | jq '. | length')" -eq 0 ]; then
            echo "::notice::No caches found matching the prefix '$CACHE_KEY_PREFIX'."
            echo "caches-to-delete-ids=[]" >> $GITHUB_OUTPUT
            echo "num-caches-to-delete=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          most_recent_cache_id=$(echo "$all_matching_caches_json" | jq -r '.[0].id')
          most_recent_cache_key=$(echo "$all_matching_caches_json" | jq -r '.[0].key')
          most_recent_cache_created_at=$(echo "$all_matching_caches_json" | jq -r '.[0].created_at')

          echo "Most recent cache to KEEP:"
          echo "ID: $most_recent_cache_id"
          echo "Key: $most_recent_cache_key"
          echo "Created at: $most_recent_cache_created_at"

          caches_to_delete_ids=$(echo "$all_matching_caches_json" | jq -r ".[1:] | .[].id")
          num_caches_to_delete=$(echo "$all_matching_caches_json" | jq ".[1:] | length")

          if [ -z "$caches_to_delete_ids" ] || [ "$num_caches_to_delete" -eq 0 ]; then
            echo "::notice::Only one matching cache found, nothing else to delete."
            echo "caches-to-delete-ids=[]" >> $GITHUB_OUTPUT
            echo "num-caches-to-delete=0" >> $GITHUB_OUTPUT
          else
            echo "The following cache IDs will be DELETED (older ones):"
            echo "$caches_to_delete_ids"
            # Output the IDs as a JSON array for the next step
            cache_ids_json=$(echo "$all_matching_caches_json" | jq -c ".[1:] | map(.id)")
            echo "caches-to-delete-ids=$cache_ids_json" >> $GITHUB_OUTPUT
            echo "num-caches-to-delete=$num_caches_to_delete" >> $GITHUB_OUTPUT
          fi

      - name: Delete Old Caches
        if: ${{ steps.run-mode.outputs.IS_DRY_RUN == 'false' && steps.fetch-caches.outputs.num-caches-to-delete > 0 }}
        env:
          GH_TOKEN: ${{ github.token }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          CACHE_IDS_TO_DELETE: ${{ steps.fetch-caches.outputs.caches-to-delete-ids }}
        run: |
          echo "Starting deletion of older caches..."

          deleted_count=0
          failed_count=0

          # Use jq to iterate over the JSON array of IDs
          echo "$CACHE_IDS_TO_DELETE" | jq -r '.[]' | while read id; do
            echo "Deleting cache ID: $id"
            if gh api -X DELETE "repos/$REPO_OWNER/$REPO_NAME/actions/caches/$id" --silent; then
              echo "Successfully deleted cache ID: $id"
              deleted_count=$((deleted_count + 1))
            else
              echo "Failed to delete cache ID: $id"
              failed_count=$((failed_count + 1))
            fi
          done

          echo "Deletion process completed."
          echo "Successfully deleted: $deleted_count caches"
          echo "Failed to delete: $failed_count caches"

      - name: Report Dry Run Status
        if: ${{ steps.run-mode.outputs.IS_DRY_RUN == 'true' }}
        env:
          NUM_TO_DELETE: ${{ steps.fetch-caches.outputs.num-caches-to-delete || 0 }}
        run: |
          echo "Found $NUM_TO_DELETE caches that would have been deleted."

      - name: Summary
        run: |
          echo "## Cache Cleanup Summary for ${{ matrix.cache_key_prefix }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: ${{ steps.run-mode.outputs.IS_DRY_RUN == 'true' && 'Dry Run' || 'Actual Deletion' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Key Prefix**: ${{ matrix.cache_key_prefix }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Caches Found to Delete**: ${{ steps.fetch-caches.outputs.num-caches-to-delete || 0 }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.run-mode.outputs.IS_DRY_RUN }}" == "true" ]]; then
            echo "- **Action**: Listed caches only (dry run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action**: Deleted old caches" >> $GITHUB_STEP_SUMMARY
          fi
