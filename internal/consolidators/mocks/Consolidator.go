// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	common "github.com/phani-kb/dns-toolkit/internal/common"

	mock "github.com/stretchr/testify/mock"

	multilog "github.com/phani-kb/multilog"

	utils "github.com/phani-kb/dns-toolkit/internal/utils"
)

// Consolidator is an autogenerated mock type for the Consolidator type
type Consolidator struct {
	mock.Mock
}

// Consolidate provides a mock function with given fields: logger, processedFiles
func (_m *Consolidator) Consolidate(logger *multilog.Logger, processedFiles []common.ProcessedFile) (utils.StringSet, []common.FileInfo) {
	ret := _m.Called(logger, processedFiles)

	if len(ret) == 0 {
		panic("no return value specified for Consolidate")
	}

	var r0 utils.StringSet
	var r1 []common.FileInfo
	if rf, ok := ret.Get(0).(func(*multilog.Logger, []common.ProcessedFile) (utils.StringSet, []common.FileInfo)); ok {
		return rf(logger, processedFiles)
	}
	if rf, ok := ret.Get(0).(func(*multilog.Logger, []common.ProcessedFile) utils.StringSet); ok {
		r0 = rf(logger, processedFiles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.StringSet)
		}
	}

	if rf, ok := ret.Get(1).(func(*multilog.Logger, []common.ProcessedFile) []common.FileInfo); ok {
		r1 = rf(logger, processedFiles)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]common.FileInfo)
		}
	}

	return r0, r1
}

// FilterEntries provides a mock function with given fields: logger, entrySet, filterSet
func (_m *Consolidator) FilterEntries(logger *multilog.Logger, entrySet utils.StringSet, filterSet utils.StringSet) (utils.StringSet, utils.StringSet) {
	ret := _m.Called(logger, entrySet, filterSet)

	if len(ret) == 0 {
		panic("no return value specified for FilterEntries")
	}

	var r0 utils.StringSet
	var r1 utils.StringSet
	if rf, ok := ret.Get(0).(func(*multilog.Logger, utils.StringSet, utils.StringSet) (utils.StringSet, utils.StringSet)); ok {
		return rf(logger, entrySet, filterSet)
	}
	if rf, ok := ret.Get(0).(func(*multilog.Logger, utils.StringSet, utils.StringSet) utils.StringSet); ok {
		r0 = rf(logger, entrySet, filterSet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.StringSet)
		}
	}

	if rf, ok := ret.Get(1).(func(*multilog.Logger, utils.StringSet, utils.StringSet) utils.StringSet); ok {
		r1 = rf(logger, entrySet, filterSet)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.StringSet)
		}
	}

	return r0, r1
}

// GetListType provides a mock function with no fields
func (_m *Consolidator) GetListType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetListType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSourceType provides a mock function with no fields
func (_m *Consolidator) GetSourceType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourceType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsValid provides a mock function with given fields: processedFile
func (_m *Consolidator) IsValid(processedFile common.ProcessedFile) bool {
	ret := _m.Called(processedFile)

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.ProcessedFile) bool); ok {
		r0 = rf(processedFile)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveEntries provides a mock function with given fields: logger, entrySet, filePath
func (_m *Consolidator) SaveEntries(logger *multilog.Logger, entrySet utils.StringSet, filePath string) error {
	ret := _m.Called(logger, entrySet, filePath)

	if len(ret) == 0 {
		panic("no return value specified for SaveEntries")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*multilog.Logger, utils.StringSet, string) error); ok {
		r0 = rf(logger, entrySet, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsolidator creates a new instance of Consolidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsolidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consolidator {
	mock := &Consolidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
