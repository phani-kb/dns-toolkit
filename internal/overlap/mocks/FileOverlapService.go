// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	common "github.com/phani-kb/dns-toolkit/internal/common"
	mock "github.com/stretchr/testify/mock"

	multilog "github.com/phani-kb/multilog"
)

// FileOverlapService is an autogenerated mock type for the FileOverlapService type
type FileOverlapService struct {
	mock.Mock
}

// FindOverlap provides a mock function with given fields: logger, genericSourceType, files
func (_m *FileOverlapService) FindOverlap(logger *multilog.Logger, genericSourceType string, files []common.ProcessedFile) common.OverlapSourceType {
	ret := _m.Called(logger, genericSourceType, files)

	if len(ret) == 0 {
		panic("no return value specified for FindOverlap")
	}

	var r0 common.OverlapSourceType
	if rf, ok := ret.Get(0).(func(*multilog.Logger, string, []common.ProcessedFile) common.OverlapSourceType); ok {
		r0 = rf(logger, genericSourceType, files)
	} else {
		r0 = ret.Get(0).(common.OverlapSourceType)
	}

	return r0
}

// GetOverlapFilename provides a mock function with given fields: name1, listType1, name2, listType2, sourceType
func (_m *FileOverlapService) GetOverlapFilename(name1 string, listType1 string, name2 string, listType2 string, sourceType string) string {
	ret := _m.Called(name1, listType1, name2, listType2, sourceType)

	if len(ret) == 0 {
		panic("no return value specified for GetOverlapFilename")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) string); ok {
		r0 = rf(name1, listType1, name2, listType2, sourceType)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SaveOverlap provides a mock function with given fields: logger, _a1, filename
func (_m *FileOverlapService) SaveOverlap(logger *multilog.Logger, _a1 []string, filename string) (string, error) {
	ret := _m.Called(logger, _a1, filename)

	if len(ret) == 0 {
		panic("no return value specified for SaveOverlap")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*multilog.Logger, []string, string) (string, error)); ok {
		return rf(logger, _a1, filename)
	}
	if rf, ok := ret.Get(0).(func(*multilog.Logger, []string, string) string); ok {
		r0 = rf(logger, _a1, filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*multilog.Logger, []string, string) error); ok {
		r1 = rf(logger, _a1, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteCompactOverlapSummaries provides a mock function with given fields: logger, processedFiles, genericSourceTypes, maxWorkers
func (_m *FileOverlapService) WriteCompactOverlapSummaries(logger *multilog.Logger, processedFiles []common.ProcessedFile, genericSourceTypes []string, maxWorkers int) ([]common.OverlapSummary, error) {
	ret := _m.Called(logger, processedFiles, genericSourceTypes, maxWorkers)

	if len(ret) == 0 {
		panic("no return value specified for WriteCompactOverlapSummaries")
	}

	var r0 []common.OverlapSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(*multilog.Logger, []common.ProcessedFile, []string, int) ([]common.OverlapSummary, error)); ok {
		return rf(logger, processedFiles, genericSourceTypes, maxWorkers)
	}
	if rf, ok := ret.Get(0).(func(*multilog.Logger, []common.ProcessedFile, []string, int) []common.OverlapSummary); ok {
		r0 = rf(logger, processedFiles, genericSourceTypes, maxWorkers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.OverlapSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(*multilog.Logger, []common.ProcessedFile, []string, int) error); ok {
		r1 = rf(logger, processedFiles, genericSourceTypes, maxWorkers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFileOverlapService creates a new instance of FileOverlapService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileOverlapService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileOverlapService {
	mock := &FileOverlapService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
