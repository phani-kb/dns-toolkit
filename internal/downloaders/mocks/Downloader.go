// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	common "github.com/phani-kb/dns-toolkit/internal/common"
	config "github.com/phani-kb/dns-toolkit/internal/config"

	mock "github.com/stretchr/testify/mock"

	multilog "github.com/phani-kb/multilog"
)

// Downloader is an autogenerated mock type for the Downloader type
type Downloader struct {
	mock.Mock
}

// Download provides a mock function with given fields: logger, file, skipCertVerify, skipCertHosts, applicationConfig
func (_m *Downloader) Download(logger *multilog.Logger, file common.DownloadFile, skipCertVerify bool, skipCertHosts []string, applicationConfig config.ApplicationConfig) (string, bool, error) {
	ret := _m.Called(logger, file, skipCertVerify, skipCertHosts, applicationConfig)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(*multilog.Logger, common.DownloadFile, bool, []string, config.ApplicationConfig) (string, bool, error)); ok {
		return rf(logger, file, skipCertVerify, skipCertHosts, applicationConfig)
	}
	if rf, ok := ret.Get(0).(func(*multilog.Logger, common.DownloadFile, bool, []string, config.ApplicationConfig) string); ok {
		r0 = rf(logger, file, skipCertVerify, skipCertHosts, applicationConfig)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*multilog.Logger, common.DownloadFile, bool, []string, config.ApplicationConfig) bool); ok {
		r1 = rf(logger, file, skipCertVerify, skipCertHosts, applicationConfig)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(*multilog.Logger, common.DownloadFile, bool, []string, config.ApplicationConfig) error); ok {
		r2 = rf(logger, file, skipCertVerify, skipCertHosts, applicationConfig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Name provides a mock function with no fields
func (_m *Downloader) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PostDownloadProcess provides a mock function with given fields: logger, filePath, count
func (_m *Downloader) PostDownloadProcess(logger *multilog.Logger, filePath string, count int) error {
	ret := _m.Called(logger, filePath, count)

	if len(ret) == 0 {
		panic("no return value specified for PostDownloadProcess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*multilog.Logger, string, int) error); ok {
		r0 = rf(logger, filePath, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShouldDownload provides a mock function with given fields: logger, summaryFile, file
func (_m *Downloader) ShouldDownload(logger *multilog.Logger, summaryFile string, file common.DownloadFile) bool {
	ret := _m.Called(logger, summaryFile, file)

	if len(ret) == 0 {
		panic("no return value specified for ShouldDownload")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*multilog.Logger, string, common.DownloadFile) bool); ok {
		r0 = rf(logger, summaryFile, file)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewDownloader creates a new instance of Downloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Downloader {
	mock := &Downloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
