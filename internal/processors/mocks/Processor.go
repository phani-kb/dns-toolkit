// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	multilog "github.com/phani-kb/multilog"
	mock "github.com/stretchr/testify/mock"
)

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

// GetListType provides a mock function with no fields
func (_m *Processor) GetListType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetListType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSourceType provides a mock function with no fields
func (_m *Processor) GetSourceType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourceType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Process provides a mock function with given fields: logger, content
func (_m *Processor) Process(logger *multilog.Logger, content string) ([]string, []string) {
	ret := _m.Called(logger, content)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 []string
	var r1 []string
	if rf, ok := ret.Get(0).(func(*multilog.Logger, string) ([]string, []string)); ok {
		return rf(logger, content)
	}
	if rf, ok := ret.Get(0).(func(*multilog.Logger, string) []string); ok {
		r0 = rf(logger, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*multilog.Logger, string) []string); ok {
		r1 = rf(logger, content)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Processor {
	mock := &Processor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
